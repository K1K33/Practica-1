import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

# Datos de entrada (Celsius) y salida (Kelvin)
celsius = np.array([-15, -5, 0, 5, 15], dtype=float)
kelvin = np.array([258.15, 268.15, 273.15, 278.15, 288.15], dtype=float)

# Definición del modelo con capas densas
oculta1 = tf.keras.layers.Dense(units=3, input_shape=[1])
oculta2 = tf.keras.layers.Dense(units=3)
salida = tf.keras.layers.Dense(units=1)
modelo = tf.keras.Sequential([oculta1, oculta2, salida])

# Compilación del modelo
modelo.compile(
    optimizer=tf.keras.optimizers.Adam(0.1),
    loss='mean_squared_error'
)

# Entrenamiento del modelo
print("Comenzando entrenamiento...")
historial = modelo.fit(celsius, kelvin, epochs=1000, verbose=False)
print("¡Modelo entrenado!")

# Visualización de la magnitud de la pérdida a lo largo de las épocas
plt.xlabel("# Epoca")
plt.ylabel("Magnitud de pérdida")
plt.plot(historial.history["loss"])
plt.show()

# Realización de una predicción
temperatura_celsius = np.array([100.0])
resultado_kelvin = modelo.predict(temperatura_celsius)
print("La predicción es " + str(resultado_kelvin) + " K")
